{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { uri } from \"../config/api\";\nconst cache = {};\nconst useFetchUser = userId => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchUser = useCallback(async () => {\n    if (!userId) return;\n    setLoading(true);\n    setError(null);\n\n    // Check cache first\n    if (cache[userId]) {\n      setUser(cache[userId]);\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await fetch(`/users/${uri}/${userId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch user data');\n      }\n      const data = await response.json();\n      cache[userId] = data;\n      setUser(data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userId]);\n  useEffect(() => {\n    fetchUser();\n  }, [fetchUser]);\n  return {\n    user,\n    loading,\n    error,\n    refetch: fetchUser\n  };\n};\n_s(useFetchUser, \"x7Yz/YpyTT0iBh8ZTQTa4rVs4VU=\");\nexport default useFetchUser;","map":{"version":3,"names":["useState","useEffect","useCallback","uri","cache","useFetchUser","userId","_s","user","setUser","loading","setLoading","error","setError","fetchUser","response","fetch","ok","Error","data","json","err","message","refetch"],"sources":["C:/Users/serva/Projet/qalqul_technical_test/task_1/src/api/userFecth.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport {uri} from \"../config/api\";\r\n\r\nconst cache = {};\r\n\r\nconst useFetchUser = (userId) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fetchUser = useCallback(async () => {\r\n        if (!userId) return;\r\n\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        // Check cache first\r\n        if (cache[userId]) {\r\n            setUser(cache[userId]);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`/users/${uri}/${userId}`);\r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch user data');\r\n            }\r\n            const data = await response.json();\r\n            cache[userId] = data;\r\n            setUser(data);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [userId]);\r\n\r\n    useEffect(() => {\r\n        fetchUser();\r\n    }, [fetchUser]);\r\n\r\n    return { user, loading, error, refetch: fetchUser };\r\n};\r\n\r\nexport default useFetchUser;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAAQC,GAAG,QAAO,eAAe;AAEjC,MAAMC,KAAK,GAAG,CAAC,CAAC;AAEhB,MAAMC,YAAY,GAAIC,MAAM,IAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMc,SAAS,GAAGZ,WAAW,CAAC,YAAY;IACtC,IAAI,CAACI,MAAM,EAAE;IAEbK,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;;IAEd;IACA,IAAIT,KAAK,CAACE,MAAM,CAAC,EAAE;MACfG,OAAO,CAACL,KAAK,CAACE,MAAM,CAAC,CAAC;MACtBK,UAAU,CAAC,KAAK,CAAC;MACjB;IACJ;IAEA,IAAI;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAUb,GAAG,IAAIG,MAAM,EAAE,CAAC;MACvD,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClChB,KAAK,CAACE,MAAM,CAAC,GAAGa,IAAI;MACpBV,OAAO,CAACU,IAAI,CAAC;IACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACVR,QAAQ,CAACQ,GAAG,CAACC,OAAO,CAAC;IACzB,CAAC,SAAS;MACNX,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EAEZL,SAAS,CAAC,MAAM;IACZa,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,OAAO;IAAEN,IAAI;IAAEE,OAAO;IAAEE,KAAK;IAAEW,OAAO,EAAET;EAAU,CAAC;AACvD,CAAC;AAACP,EAAA,CAtCIF,YAAY;AAwClB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}